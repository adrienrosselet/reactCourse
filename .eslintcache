[{"/Users/adrien/Documents/coursWeb/coursReact/urok/src/index.js":"1","/Users/adrien/Documents/coursWeb/coursReact/urok/src/Reducers/index.js":"2","/Users/adrien/Documents/coursWeb/coursReact/urok/src/reducers/index.js":"3","/Users/adrien/Documents/coursWeb/coursReact/urok/src/reducers/chatReducer.js":"4","/Users/adrien/Documents/coursWeb/coursReact/urok/src/actions/chatActions.js":"5","/Users/adrien/Documents/coursWeb/coursReact/urok/src/actions/messageActions.js":"6","/Users/adrien/Documents/coursWeb/coursReact/urok/src/utils/store.js":"7","/Users/adrien/Documents/coursWeb/coursReact/urok/src/middlewares/index.js":"8","/Users/adrien/Documents/coursWeb/coursReact/urok/src/middlewares/messageMiddleware.js":"9","/Users/adrien/Documents/coursWeb/coursReact/urok/src/containers/App.js":"10","/Users/adrien/Documents/coursWeb/coursReact/urok/src/containers/Router.js":"11","/Users/adrien/Documents/coursWeb/coursReact/urok/src/containers/layout.js":"12","/Users/adrien/Documents/coursWeb/coursReact/urok/src/containers/chatList.js":"13","/Users/adrien/Documents/coursWeb/coursReact/urok/src/containers/header.js":"14","/Users/adrien/Documents/coursWeb/coursReact/urok/src/components/Message/index.jsx":"15","/Users/adrien/Documents/coursWeb/coursReact/urok/src/reportWebVitals.js":"16","/Users/adrien/Documents/coursWeb/coursReact/urok/src/containers/MessageField.jsx":"17","/Users/adrien/Documents/coursWeb/coursReact/urok/src/reducers/messageReducer.js":"18","/Users/adrien/Documents/coursWeb/coursReact/urok/src/utils/schemas.js":"19"},{"size":1167,"mtime":1612767888886,"results":"20","hashOfConfig":"21"},{"size":78,"mtime":1612109350247,"results":"22","hashOfConfig":"21"},{"size":305,"mtime":1612450065661,"results":"23","hashOfConfig":"21"},{"size":2451,"mtime":1612772305878,"results":"24","hashOfConfig":"21"},{"size":1525,"mtime":1612761540446,"results":"25","hashOfConfig":"21"},{"size":1002,"mtime":1612709684860,"results":"26","hashOfConfig":"21"},{"size":1869,"mtime":1612766480317,"results":"27","hashOfConfig":"21"},{"size":168,"mtime":1612709554308,"results":"28","hashOfConfig":"21"},{"size":557,"mtime":1612644172115,"results":"29","hashOfConfig":"21"},{"size":1001,"mtime":1612425122423,"results":"30","hashOfConfig":"21"},{"size":593,"mtime":1612614430528,"results":"31","hashOfConfig":"21"},{"size":2719,"mtime":1612768731620,"results":"32","hashOfConfig":"21"},{"size":4080,"mtime":1612455224777,"results":"33","hashOfConfig":"21"},{"size":168,"mtime":1611840966173,"results":"34","hashOfConfig":"21"},{"size":689,"mtime":1612765945060,"results":"35","hashOfConfig":"21"},{"size":362,"mtime":1610812368136,"results":"36","hashOfConfig":"21"},{"size":6279,"mtime":1612770436252,"results":"37","hashOfConfig":"21"},{"size":2051,"mtime":1612773381108,"results":"38","hashOfConfig":"21"},{"size":174,"mtime":1612725549222,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},"ikeq66",{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"43"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"43"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"43"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"43"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"43"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"43"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"/Users/adrien/Documents/coursWeb/coursReact/urok/src/index.js",["86"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n//import { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport initStore, { history } from './utils/store';\nimport { ConnectedRouter } from 'connected-react-router';\nimport { BrowserRouter } from 'react-router-dom';\nimport { PersistGate } from 'redux-persist/integration/react';\n\n//const { store, persistor } = initStore();\n//<PersistGate loading={ null } persistor={ persistor }>\n//</PersistGate>\n//<Provider store={ store }>\nReactDOM.render(\n  <Provider store={ initStore() }>\n    <ConnectedRouter history={history}>\n      <BrowserRouter history={history}>\n        <React.StrictMode>\n          <App />\n        </React.StrictMode>\n      </BrowserRouter>\n    </ConnectedRouter>\n   </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["87","88"],"/Users/adrien/Documents/coursWeb/coursReact/urok/src/Reducers/index.js",[],"/Users/adrien/Documents/coursWeb/coursReact/urok/src/reducers/index.js",["89"],"import { combineReducers } from 'redux';\nimport chatReducer from './chatReducer';\nimport messageReducer from './messageReducer';\nimport { connectRouter } from 'connected-react-router'\n\nexport default (history) => combineReducers({\n   router: connectRouter(history),\n   chatReducer,\n   messageReducer,\n});\n","/Users/adrien/Documents/coursWeb/coursReact/urok/src/reducers/chatReducer.js",["90"],"import update from 'react-addons-update';\nimport { SEND_MESSAGE } from '../actions/messageActions';\nimport { ADD_CHAT } from \"../actions/chatActions\";\nimport { DELETE_CHAT } from \"../actions/chatActions\";\nimport { RESET_CHAT } from \"../actions/chatActions\";\n//import { SUCCESS_MESSAGES_LOADING } from \"../actions/messageActions\";\nimport { SUCCESS_CHATS_LOADING } from \"../actions/chatActions\";\n\nconst initialStore = {\n   chats: {\n     1: {title: 'Чат 1', messageList: []},\n     2: {title: 'Чат 2', messageList: []},\n     3: {title: 'Чат 3', messageList: []},\n    },\n   isLoading: true,\n};\n\n\nexport default function chatReducer(store = initialStore, action) {\n  switch (action.type) {\n     // case SUCCESS_MESSAGES_LOADING: {\n     //     const chats = {...store.chats};\n     //     action.payload.forEach(msg => {\n     //         const { id, chatId } = msg;\n     //         chats[chatId].messageList.push(id);\n     //     });\n     //     return update(store, {\n     //         chats: { $set: chats },\n     //         isLoading: { $set: false },\n     //     });\n     //  }\n      case SUCCESS_CHATS_LOADING: {\n       return update(store, {\n         chats: { $set: action.payload.entities.chats },\n         isLoading: { $set: false },\n       });\n      }\n      case SEND_MESSAGE: {\n          return update(store, {\n              chats: { $merge: { [action.chatId]: {\n                  title: store.chats[action.chatId].title,\n                  messageList: [...store.chats[action.chatId].messageList, action.messageId]\n              } } },\n          });\n      }\n      case ADD_CHAT: {\n          const chatId = Object.keys(store.chats).length + 1;\n          return update(store, {\n             chats: { $merge: {\n                 [chatId]: {\n                     title: action.title, messageList: []\n             } } },\n          });\n      }\n      case DELETE_CHAT: {\n          const chatId = Object.keys(store.chats).length + 1;\n          return update(store, {\n             chats: { $merge: {\n                 [action.chatId]: {\n                     title: '', messageList: []\n             } } },\n          });\n      }\n      case RESET_CHAT: {\n        return update(store, {\n           chats: { $set: {\n             1: {title: 'Чат 1', messageList: []},\n             2: {title: 'Чат 2', messageList: []},\n             3: {title: 'Чат 3', messageList: []},\n           } },\n        });\n      }\n      default:\n          return store;\n  }\n}\n","/Users/adrien/Documents/coursWeb/coursReact/urok/src/actions/chatActions.js",[],"/Users/adrien/Documents/coursWeb/coursReact/urok/src/actions/messageActions.js",[],"/Users/adrien/Documents/coursWeb/coursReact/urok/src/utils/store.js",[],"/Users/adrien/Documents/coursWeb/coursReact/urok/src/middlewares/index.js",["91"],"import { apiMiddleware } from 'redux-api-middleware';\nimport messageMiddleware from './messageMiddleware';\n\nexport default [\n   apiMiddleware,\n   messageMiddleware,\n];\n","/Users/adrien/Documents/coursWeb/coursReact/urok/src/middlewares/messageMiddleware.js",["92","93"],"import { SEND_MESSAGE, sendMessage } from \"../actions/messageActions\";\n\nexport default store => next => (action) => {\n   switch (action.type) {\n       case SEND_MESSAGE:\n           if (action.sender === 'adri') {\n             setTimeout(() => store.dispatch(\n               sendMessage( Object.keys(store.getState().messageReducer.messages).length + 1,\n                     'Не приставай ко мне, я робот!', 'bot', action.chatId)), 1000)\n              //console.log('on va répondre')       \n\n           }\n   }\n   return next(action)\n}\n","/Users/adrien/Documents/coursWeb/coursReact/urok/src/containers/App.js",[],"/Users/adrien/Documents/coursWeb/coursReact/urok/src/containers/Router.js",[],"/Users/adrien/Documents/coursWeb/coursReact/urok/src/containers/layout.js",[],"/Users/adrien/Documents/coursWeb/coursReact/urok/src/containers/chatList.js",["94"],"import React from 'react';\n//import './components.css';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport SendIcon from '@material-ui/icons/Send';\nimport TextField from '@material-ui/core/TextField';\nimport './chatList.css'\nimport { Link } from 'react-router-dom';\nimport PropTypes from \"prop-types\";\n\nimport { push } from 'connected-react-router';\nimport {bindActionCreators} from \"redux\";\nimport connect from \"react-redux/es/connect/connect\";\nimport { addChat } from '../actions/chatActions';\n\nclass ChatList extends React.Component{\n\n  // state = {\n  //   chats: [{name: 'chat noir', id: '1'},{name: 'chat botte', id: '2'},{name: 'chatiment', id: '3'}]\n  // };\n\n  static propTypes = {\n         chats: PropTypes.object.isRequired,\n         addChat: PropTypes.func.isRequired,\n         push: PropTypes.func.isRequired,\n     };\n\n   state = {\n       newChatName: ''\n   };\n   changeHandler = (event) => {\n     this.setState({ newChatName: event.target.value });\n   }\n   submitHandler = (event) => {\n     this.props.addChat(this.state.newChatName);\n     event.preventDefault();\n   }\n\n   handleNavigate = (link) => {\n       this.props.push(link);\n   };\n\n  // renderList = (ele, index) => {\n  //   return(\n  //     <Link key={index} onClick={ () => this.handleNavigate(\"/chat/\"+(index+1)+\"/\") } >\n  //       <ListItem button >\n  //         <ListItemIcon >\n  //           <SendIcon />\n  //         </ListItemIcon>\n  //         <ListItemText  primary={ele.title} />\n  //       </ListItem>\n  //     </Link>\n  //   );\n  // }\n  renderList = (chatId) => {\n    return(\n      <Link key={chatId} to={\"/chat/\"+(chatId)+\"/\"} onClick={ () => this.handleNavigate(`/chat/${chatId}/`) } >\n        <ListItem button >\n          <ListItemIcon >\n            <SendIcon />\n          </ListItemIcon>\n          <ListItemText  primary={this.props.chats[chatId].title} />\n        </ListItem>\n      </Link>\n    );\n  }\n\n  render(){\n    // const { chats } = this.props;\n    // const chatElements = Object.keys(chats).map(chatId => (\n    //               <ListItem\n    //                   key={ chatId }\n    //                   primaryText={ chats[chatId].title }\n    //                   leftIcon={ <ContentSend /> }\n    //                   onClick={ () => this.handleNavigate(`/chat/${chatId}`) }\n    //               />));\n\n    return (\n      <List className='chatlist-ul'>\n          {Object.keys(this.props.chats).map(this.renderList)}\n          <ListItem>\n          <form onSubmit={this.submitHandler}>\n            <input type=\"text\" value={this.state.newChatName} onChange={this.changeHandler} />\n            <input type='submit' />\n          </form>\n          </ListItem>\n      </List>\n\n    )\n  }\n}\n\n// const { chats } = this.props;\n// const chatElements = Object.keys(chats).map(chatId => (\n//            <ListItem\n//                key={ chatId }\n//                primaryText={ chats[chatId].title }\n//                leftIcon={ <SendIcon /> }\n//                onClick={ () => this.handleNavigate(`/chat/${chatId}`) }\n//            />));\n\n// <List className='chatlist-ul'>\n//         { chatElements }\n//         <ListItem\n//           key=\"Add new chat\"\n//           leftIcon={ <SendIcon /> }\n//           onClick={ this.handleAddChat }\n//           style={ { height: '60px' } }\n//           children= {<TextField\n//             key=\"textField\"\n//             fullWidth\n//             name=\"input\"\n//             hintText=\"Добавить новый чат\"\n//             onChange={ this.handleChange }\n//             value={ this.state.input }\n//             onKeyUp={ this.handleKeyUp }\n//           />}\n//         />\n// </List>\n\n//Object.values(this.props.chats).map(this.renderList)\nconst mapStateToProps = ({ chatReducer }) => ({\n   chats: chatReducer.chats,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({ addChat, push }, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatList);\n","/Users/adrien/Documents/coursWeb/coursReact/urok/src/containers/header.js",[],"/Users/adrien/Documents/coursWeb/coursReact/urok/src/components/Message/index.jsx",[],"/Users/adrien/Documents/coursWeb/coursReact/urok/src/reportWebVitals.js",[],"/Users/adrien/Documents/coursWeb/coursReact/urok/src/containers/MessageField.jsx",["95"],"import React from 'react';\nimport './MessageField.css';\nimport Message from '../components/Message';\nimport { bindActionCreators } from \"redux\";\nimport connect from \"react-redux/es/connect/connect\";\nimport PropTypes from \"prop-types\";\nimport { resetChat } from '../actions/chatActions';\nimport { resetMessage, loadMessages } from '../actions/messageActions';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport { loadChats } from '../actions/chatActions';\n\nclass MessageField extends React.Component{\n  static propTypes = {\n       chatId: PropTypes.number.isRequired,\n       messages: PropTypes.object.isRequired,\n       chats: PropTypes.object.isRequired,\n       sendMessage: PropTypes.func.isRequired,\n       isLoading: PropTypes.bool.isRequired,\n\n   };\n  state = {\n       value: '',\n   };\n\n   componentDidMount() {\n       //this.props.loadMessages();\n       this.props.loadChats();\n   }\n\n\n   //handleSendMessage = (message, sender) => {\n       //const { messages, chats, value, chatId } = this.props;\n       //const { chatId } = this.props;\n\n       // if (value.length > 0 || sender === 'bot') {\n       //     const messageId = Object.keys(messages).length + 1;\n       //     this.setState({\n       //         messages: {...messages,\n       //             [messageId]: {text: message, sender: sender}},\n       //         chats: {...chats,\n       //             [chatId]: { ...chats[chatId],\n       //                 messageList: [...chats[chatId]['messageList'], messageId]\n       //             }\n       //         },\n       //     })\n       // }\n       // if (sender === 'me') {\n       //     this.setState({ value: '' })\n       // }\n   //     this.props.sendMessage(this.state.value, 'adri');\n   // };\n   handleSendMessage = (message, sender) => {\n        if (this.state.value.length > 0 || sender === 'bot') {\n            this.props.sendMessage(message, sender);\n        }\n        if (sender === 'adri') {\n            this.setState({ value: '' });\n        }\n    };\n\n  handleSubmit = (event) => {\n    //this.props.sendMessage(this.state.value, 'adri');\n    this.handleSendMessage(this.state.value, 'adri');\n    //this.setState({ value: '' });\n\n    //this.handleSendMessage(this.state.value, 'me')\n    //this.setState(state => ([this.props.chatId]: [...state.discussion,{author: 'pedro', message: state.value}], value: ''}));\n    event.preventDefault();\n  };\n\n  // handleChange = (event) => {\n  //      this.setState({ [event.target.name]: event.target.value });\n  //  };\n  handleChange = (event) => {\n       this.setState({ value: event.target.value });\n   };\n   // handleKeyUp = (event) => {\n   //      if (event.keyCode === 13) { // Enter\n   //          this.handleSendMessage(this.state.input, 'adri');\n   //      }\n   //  };\n  handleKey = (event) => {\n    if(event.key === 'Enter'){\n      //this.props.sendMessage(this.state.value, 'adri');\n      this.handleSendMessage(this.state.value, 'adri');\n      //this.setState({ value: '' });\n\n      //this.setState(state => ([this.props.chatId]: [...state.discussion,{author: 'pedro', message: state.value}], value: ''}));\n    }\n  }\n\n  // componentDidUpdate() {\n  //      if (this.state.discussion[this.state.discussion.length - 1].author !== 'robot') {\n  //          setTimeout(() => {\n  //            if(this.state.discussion[this.state.discussion.length - 1].author !== 'robot'){\n  //              this.setState(state => ({\n  //                  discussion: [ ...state.discussion, {author: 'robot', message: 'hi pedro!'} ] }))\n  //            }\n  //          },1500);\n  //      }\n  //  }\n\n   // componentDidUpdate(prevProps, prevState) {\n   //     const { messages } = this.state;\n   //     if (Object.keys(prevState.messages).length < Object.keys(messages).length &&\n   //         Object.values(messages)[Object.values(messages).length - 1].sender === 'me') {\n   //         setTimeout(() =>\n   //             this.handleSendMessage('Не приставай ко мне, я робот!', 'bot'), 1000);\n   //     }\n   // }\n\n   // handleAddChat = () => {\n   //   const newChatId = Object.keys(this.state.chats).length + 2;\n   //   //const newChatId = 4;\n   //   this.setState({\n   //       chats: {...this.state.chats,\n   //           [newChatId]: {title: 'Чат '+ newChatId, messageList: [newChatId]}\n   //       },\n   //   })\n   //   //console.log(this.state.chats);\n   //\n   //  }\n\n   //renderMessage = (messId, index) => {\n     //console.log(messObj.messageList[]);//ca rends un array avec l'id des messages\n     //console.log(this.props.chatId);//ca rends l id du chat actuel\n     //console.log(messId);\n     //return (<Message key={index} mes={this.props.messages[messId].text } aut={this.props.messages[messId].sender} />)\n   //}\n   resetAll = () => {\n     this.props.resetChat();\n     this.props.resetMessage();\n   }\n  render() {\n    if (this.props.isLoading) {\n           return <CircularProgress />\n       }\n      const { chatId, messages, chats } = this.props;\n       console.log(chatId);\n       //const messageElements='';\n       const messageElements = chats[chatId].messageList.map((messageId, index) => (\n         <Message\n             key={ index }\n             mes={ messages[messageId].text }\n             aut={ messages[messageId].sender }\n         />\n           ));\n\n    return (\n    <div className='textFiels-div'>\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Message:\n          <textarea value={this.state.value} onChange={this.handleChange} onKeyPress={this.handleKey}/>\n        </label>\n        <input type=\"submit\" value=\"Envoyer\" />\n        <button onClick={this.resetAll} >reset all</button>\n      </form>\n      { messageElements }\n    </div>\n  );\n  }\n}\n\n\n\n//{Object.values(this.props.chats[this.props.chatId].messageList).map(this.renderMessage)}\n\n// {this.props.chatId!==undefined?\n//   this.state.chats[this.props.chatId].messageList.map(this.renderMessage):\n//   this.state.chats[1].messageList.map(this.renderMessage)}\n\nconst mapStateToProps = ({ chatReducer , messageReducer }) => ({\n   chats: chatReducer.chats,\n   isLoading: messageReducer.isLoading,\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators({ resetChat, resetMessage , loadChats}, dispatch);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MessageField);\n","/Users/adrien/Documents/coursWeb/coursReact/urok/src/reducers/messageReducer.js",[],"/Users/adrien/Documents/coursWeb/coursReact/urok/src/utils/schemas.js",[],{"ruleId":"96","severity":1,"message":"97","line":11,"column":10,"nodeType":"98","messageId":"99","endLine":11,"endColumn":21},{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":6,"column":1,"nodeType":"106","endLine":10,"endColumn":4},{"ruleId":"96","severity":1,"message":"107","line":56,"column":17,"nodeType":"98","messageId":"99","endLine":56,"endColumn":23},{"ruleId":"104","severity":1,"message":"108","line":4,"column":1,"nodeType":"106","endLine":7,"endColumn":3},{"ruleId":"104","severity":1,"message":"105","line":3,"column":1,"nodeType":"106","endLine":15,"endColumn":2},{"ruleId":"109","severity":1,"message":"110","line":4,"column":4,"nodeType":"111","messageId":"112","endLine":13,"endColumn":5},{"ruleId":"96","severity":1,"message":"113","line":8,"column":8,"nodeType":"98","messageId":"99","endLine":8,"endColumn":17},{"ruleId":"96","severity":1,"message":"114","line":8,"column":24,"nodeType":"98","messageId":"99","endLine":8,"endColumn":36},"no-unused-vars","'PersistGate' is defined but never used.","Identifier","unusedVar","no-native-reassign",["115"],"no-negated-in-lhs",["116"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","'chatId' is assigned a value but never used.","Assign array to a variable before exporting as module default","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'TextField' is defined but never used.","'loadMessages' is defined but never used.","no-global-assign","no-unsafe-negation"]